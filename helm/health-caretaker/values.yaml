# Default values for health-caretaker
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ramp110397/health-caretaker
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  webPort: 8080
  metricsPort: 9091
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: health-caretaker.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: health-caretaker-tls
  #    hosts:
  #      - health-caretaker.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Health Caretaker specific configuration
config:
  # Configuration for endpoints to monitor
  endpoints:
    - name: "Google"
      url: "https://www.google.com"
      method: "GET"
      interval: 30
      timeout: 10
      labels:
        service: "search"
        environment: "production"
        team: "platform"
        criticality: "high"
    - name: "GitHub API"
      url: "https://api.github.com"
      method: "GET"
      interval: 60
      timeout: 15
      labels:
        service: "api"
        environment: "production"
        team: "development"
        criticality: "medium"
    - name: "HTTPBin"
      url: "https://httpbin.org/status/200"
      method: "GET"
      interval: 45
      timeout: 10
      labels:
        service: "testing"
        environment: "staging"
        team: "qa"
        criticality: "low"
    - name: "Example Down Service"
      url: "https://httpbin.org/status/500"
      method: "GET"
      interval: 30
      timeout: 10
      labels:
        service: "example"
        environment: "testing"
        team: "demo"
        criticality: "low"
        expected_status: "down"

# Environment variables
env:
  WEB_PORT: 8080
  METRICS_PORT: 9091
  METRICS_ENABLED: "true"
  METRICS_PATH: "/metrics"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

