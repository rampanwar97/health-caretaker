# Production values for health-caretaker
# This is a YAML-formatted file for production deployment

replicaCount: 3

image:
  repository: your-username/health-caretaker
  pullPolicy: IfNotPresent
  tag: "v1.0.0"  # Use specific version in production

imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9091"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  webPort: 8080
  metricsPort: 9091
  annotations: {}

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: health-caretaker.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: health-caretaker-tls
      hosts:
        - health-caretaker.yourdomain.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector:
  kubernetes.io/os: linux

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - health-caretaker
        topologyKey: kubernetes.io/hostname

# Health Caretaker specific configuration
config:
  endpoints:
    - name: "Production API"
      url: "https://api.yourdomain.com/health"
      method: "GET"
      interval: 30
      timeout: 10
      labels:
        service: "api"
        environment: "production"
        team: "backend"
        criticality: "high"
    - name: "Database Health"
      url: "https://db-health.yourdomain.com/status"
      method: "GET"
      interval: 60
      timeout: 15
      labels:
        service: "database"
        environment: "production"
        team: "platform"
        criticality: "critical"
    - name: "External Service"
      url: "https://external-service.com/api/health"
      method: "GET"
      interval: 120
      timeout: 20
      labels:
        service: "external"
        environment: "production"
        team: "integration"
        criticality: "medium"

# Environment variables
env:
  WEB_PORT: 8080
  METRICS_PORT: 9091
  METRICS_ENABLED: "true"
  METRICS_PATH: "/metrics"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network Policy
networkPolicy:
  enabled: true
  ingress: []
  egress: []

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: true
  namespace: "monitoring"
  interval: 30s
  scrapeTimeout: 10s
  labels:
    app: health-caretaker
    release: prometheus
  annotations: {}

